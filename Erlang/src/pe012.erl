%%%======================================================================
%%% @author Gorka Suárez García
%%% @copyright (C) 2022-2023, Gorka Suárez García
%%% @doc
%%% The sequence of triangle numbers is generated by adding the
%%% natural numbers. So the 7th triangle number would be
%%% 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
%%%
%%% 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
%%%
%%% Let us list the factors of the first seven triangle numbers:
%%%
%%% 1: 1
%%% 3: 1,3
%%% 6: 1,2,3,6
%%% 10: 1,2,5,10
%%% 15: 1,3,5,15
%%% 21: 1,3,7,21
%%% 28: 1,2,4,7,14,28
%%%
%%% We can see that 28 is the first triangle number to have over
%%% five divisors.
%%%
%%% What is the value of the first triangle number to have over
%%% five hundred divisors?
%%% @end
%%%======================================================================
-module(pe012).
-author("Gorka Suárez García").
-export([main/0, result/0]).

-define(GOAL, 500).

%%-----------------------------------------------------------------------
%% @doc
%% Main entry for the problem solver.
%% @end
%%-----------------------------------------------------------------------
main() ->
    io:format("The first triangle number to have over ~p divisors is ~p.~n", [?GOAL, result()]).

%%-----------------------------------------------------------------------
%% @doc
%% Main result for the problem solver.
%% @end
%%-----------------------------------------------------------------------
result() ->
    tools:find_first(triangle, {fun calc_number_of_divisors/1, {'>', ?GOAL}}).

%%-----------------------------------------------------------------------
%% @private
%% @doc
%% Gets the number of divisors for a natural number. The trick of
%% this algorithm is to calculate first the factors of the number,
%% then we'll group the factors in a list of lists, to know the
%% number of times a factor exists inside the list of factors.
%% With this data structure, the formula to obtain the number of
%% divisors is f(n) = f(n-1) * len(G(n)) + f(n-1), where G is
%% the list with the groups of factors and f(0) = 1.
%% @param Number The number to check.
%% @returns The number of divisors.
%% @end
%%-----------------------------------------------------------------------
calc_number_of_divisors(Number) ->
    case get_factors(Number) of
        [] -> 0;
        [_] -> 1;
        [_ | Groups] ->
            lists:foldl(
                fun(Group, Result) ->
                    Result + Result * length(Group)
                end,
                1, Groups
            )
    end.

%%-----------------------------------------------------------------------
%% @private
%% @doc
%% Gets the factors of a number.
%% @param Number The number to check.
%% @returns A list with the divisors.
%% @end
%%-----------------------------------------------------------------------
get_factors(Number) when Number < 1 ->
    [];
get_factors(1) ->
    [[1]];
get_factors(Number) when Number > 1 ->
    Factors = tools:take_while(
        primes, Number,
        fun (Victim, Prime) when Victim >= Prime ->
                get_factors(Victim, Prime, []);
            (_, _) ->
                return
        end
    ),
    [[1] | lists:filter(fun(X) -> X =/= [] end, Factors)].

%%-----------------------------------------------------------------------
%% @private
%% @private
%% @doc
%% Internal function for 'fun get_factors/1'.
%% @end
%%-----------------------------------------------------------------------
get_factors(Number, Prime, Result) when (Number rem Prime) =:= 0  ->
    get_factors(Number div Prime, Prime, [Prime | Result]);
get_factors(Number, _, Result) ->
    {true, Number, Result}.
