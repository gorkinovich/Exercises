%%%======================================================================
%%% @author Gorka Suárez García
%%% @copyright (C) 2022, Gorka Suárez García
%%% @doc
%%% Each new term in the Fibonacci sequence is generated by adding
%%% the previous two terms. By starting with 1 and 2, the first 10
%%% terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
%%%
%%% By considering the terms in the Fibonacci sequence whose
%%% values do not exceed four million, find the sum of the
%%% even-valued terms.
%%% @end
%%%======================================================================
-module(pe002).
-author("Gorka Suárez García").
-export([main/0]).

-define(LIMIT, 4000000).

%%-----------------------------------------------------------------------
%% @doc
%% Main entry for the problem solver.
%% @end
%%-----------------------------------------------------------------------
main() ->
    fibonacci:start_link(),
    Iterator = fibonacci:iterator(),
    Result = sum_fibonacci_numbers(Iterator, ?LIMIT, 0),
    io:format("The sum of the even-valued terms below four million is ~p.~n", [Result]).

%%-----------------------------------------------------------------------
%% @private
%% @doc
%% Sums all the even valued numbers in the Fibonacci's sequence under
%% a given limit number.
%% @param Iterator The Fibonacci's number iterator handler.
%% @param Limit The limit number to stop the iteration.
%% @param Accumulated The accumulated value of the sum.
%% @returns The final accumulated value of the sum.
%% @end
%%-----------------------------------------------------------------------
sum_fibonacci_numbers(Iterator, Limit, Accumulated) ->
    {Current, NextIterator} = fibonacci:next(Iterator),
    case Current < Limit of
        true when (Current rem 2) == 0 ->
            sum_fibonacci_numbers(NextIterator, Limit, Accumulated + Current);
        true ->
            sum_fibonacci_numbers(NextIterator, Limit, Accumulated);
        false ->
            Accumulated
    end.
