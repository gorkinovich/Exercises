//==============================================================================
// Copyright (C) 2023, Gorka Suárez García
//==============================================================================

/*
 * The sequence of triangle numbers is generated by adding
 * the natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over
 * five divisors.
 * 
 * What is the value of the first triangle number to have over
 * five hundred divisors?
 */

using System;
using System.Collections.Generic;
using System.Linq;

namespace Euler {
    /// <summary>
    /// This class represents the problem 6.
    /// </summary>
    public class PE012 : IRunnable {
        /// <summary>
        /// Main entry for the problem solver.
        /// </summary>
        public void Run () {
            const ulong GOAL = 500;

            var result = FindNumber(GOAL);

            Console.WriteLine($"The first triangle number to have over {GOAL} divisors is {result}.");
        }

        /// <summary>
        /// Find a triangle number to have over a goal of divisors.
        /// </summary>
        /// <param name="goal">The goal number to surpass.</param>
        /// <returns>The first number to surpass the goal.</returns>
        ulong FindNumber (ulong goal) {
            var primes = Sequences.LazyPrimes(true);
            return Sequences.Triangular()
                            .SkipWhile(number => GetDivisorsLength(number, primes) <= goal)
                            .First();
        }

        /// <summary>
        /// Gets the number of divisors for a natural number. The trick of this algorithm
        /// is to calculate first the factors of the number, then we'll group the factors
        /// in a list of lists, to know the number of times a factor exists inside the
        /// list of factors. With this data structure, the formula to obtain the number
        /// of divisors is f(n) = f(n - 1) * len(G(n)) + f(n - 1), where G is the list
        /// with the groups of factors and f(0) = 1.
        /// </summary>
        /// <param name="number">The number to check.</param>
        /// <param name="primes">The sequence of prime numbers.</param>
        /// <returns>The number of divisors.</returns>
        ulong GetDivisorsLength (ulong number, IEnumerable<ulong> primes) {
            return Sequences.Factors(number, primes)
                            .Skip(1)
                            .GroupBy(x => x)
                            .Select(x => (ulong) x.Count())
                            .Aggregate(1UL, (result, size) => result + result * size);
        }
    }
}
